name: Add New Member
on:
  pull_request:
    types: [opened]
  issues:
    types: [opened]

jobs:
  add_member:
    runs-on: ubuntu-latest

    steps:
      - name: Check if PR or Issue is for adding a member
        id: check_member
        run: |
          if [[ "${{ github.event.pull_request.title }}" == *"Add me to the organization"* || "${{ github.event.issue.title }}" == *"Add me to the organization"* ]]; then
            echo "::set-output name=add_member::true"
          else
            echo "::set-output name=add_member::false"
          fi

      - name: Extract Email and Validate
        id: validate_email
        if: steps.check_member.outputs.add_member == 'true'
        run: |
          EMAIL=$(jq -r '.pull_request.body' $GITHUB_EVENT_PATH | grep -oP '(?<=IIIT Delhi Email: )[^\s]*' || jq -r '.issue.body' $GITHUB_EVENT_PATH | grep -oP '(?<=IIIT Delhi Email: )[^\s]*')
          if [[ $EMAIL == *@iiitd.ac.in ]]; then
            echo "::set-output name=email_valid::true"
            echo "::set-output name=username::$(jq -r '.pull_request.user.login' $GITHUB_EVENT_PATH || jq -r '.issue.user.login' $GITHUB_EVENT_PATH)"
          else
            echo "::set-output name=email_valid::false"
          fi

      - name: Add Member to Organization
        if: steps.validate_email.outputs.email_valid == 'true'
        run: |
          curl -X PUT -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/orgs/${{ github.repository_owner }}/memberships/${{ steps.validate_email.outputs.username }}" \
            -d '{"role":"member"}'

      - name: Comment on PR or Issue
        if: steps.validate_email.outputs.email_valid == 'true'
        run: |
          COMMENT="Congratulations! Your email has been verified, and you have been added to the organization."
          ISSUE_URL=$(jq -r '.pull_request.url' $GITHUB_EVENT_PATH || jq -r '.issue.url' $GITHUB_EVENT_PATH)
          curl -X POST -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" -d "{\"body\": \"$COMMENT\"}" $ISSUE_URL/comments

      - name: Comment on Invalid Email
        if: steps.validate_email.outputs.email_valid == 'false'
        run: |
          COMMENT="Invalid email address. Please use your IIIT Delhi email (ending with @iiitd.ac.in)."
          ISSUE_URL=$(jq -r '.pull_request.url' $GITHUB_EVENT_PATH || jq -r '.issue.url' $GITHUB_EVENT_PATH)
          curl -X POST -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" -d "{\"body\": \"$COMMENT\"}" $ISSUE_URL/comments